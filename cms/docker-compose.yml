services:
  reverse-proxy: # リバースプロキシとして動作するNginx
    image: nginx:latest
    container_name: reverse-proxy
    ports:
      - "80:80"
    volumes:
      - ./reverse-proxy/default.conf:/etc/nginx/conf.d/default.conf # カスタムNginx設定をマウント
    depends_on: # このサービスが起動する前に必要な依存サービス
      - backend
      - frontend
      - database

  backend: # LaravelのバックエンドAPIサーバ
    container_name: cms_backend
    build:
      context: ./backend # Dockerfileのあるディレクトリ
    volumes:
      - ./backend/src:/var/www/html/ # Laravelのソースコードをコンテナ内にマウント
    environment: # Laravelアプリケーションの環境変数
      - APP_ENV=local # 開発環境
      - APP_DEBUG=true # デバッグモードを有効化
      - APP_KEY=${LARAVEL_APP_KEY} # アプリケーションキー
      - DB_CONNECTION=mysql
      - DB_HOST=cms_db # データベースサービス名（Dockerネットワーク内で解決）
      - DB_PORT=3306
      - DB_DATABASE=${MYSQL_DATABASE}
      - DB_USERNAME=${MYSQL_USER} 
      - DB_PASSWORD=${MYSQL_PASSWORD}
    depends_on:
      - database

  frontend: # Reactを利用したフロントエンドアプリケーション
    build:
      context: ./frontend # Dockerfileのあるディレクトリ
    container_name: cms_frontend
    volumes:
      - ./frontend:/app # フロントエンドのソースコードをコンテナ内にマウント
      - node_modules:/app/node_modules  # コンテナのnode_modulesをローカルに同期させない
    command: ["npm", "run", "dev", "--", "--host"] # ローカル開発用の起動コマンド

  database: # MySQLデータベース
    image: mysql:8.0
    container_name: cms_db
    restart: always # コンテナが停止した場合に自動再起動
    environment: # データベースの設定
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}   # .env から読み込み
      MYSQL_DATABASE: ${MYSQL_DATABASE}             # .env から読み込み
      MYSQL_USER: ${MYSQL_USER}                     # .env から読み込み
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}             # .env から読み込み
    volumes:
      - mysql_data:/var/lib/mysql # データベースデータを永続化
      - ./database/my.cnf:/etc/mysql/my.cnf # MySQLの設定ファイルをマウント
    ports:
      - "3308:3306"

volumes:
  mysql_data: # MySQLの永続化データ用ボリューム
    name: mysql
  node_modules: # フロントエンド用のNode.jsモジュールを保存するボリューム